---
title: "University Enrollment ERD"
subtitle: "__SQL"
format: 
  html: 
    code-fold: true
    code-line-numbers: true
    fig-width: 10.5
    fig-height: 7.5
---

## Goal
I designed a relational database schema using an Entity-Relationship Diagram (ERD), incorporating key entities such as students, faculty, courses, departments, and enrollments with well-defined relationships. To ensure data integrity, I structured tables efficiently to reduce redundancy. The schema supports queries that retrieve relevant information, such as identifying faculty teaching a particular student in a given term, determining the number of courses offered, analyzing faculty teaching capacities, and filtering data based on specific criteria.

## ERD
![](image.png)

## CODE
```sql
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema university
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `university` ;

-- -----------------------------------------------------
-- Schema university
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `university` DEFAULT CHARACTER SET utf8 ;
USE `university` ;

-- -----------------------------------------------------
-- Table `university`.`college`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university`.`college` ;

CREATE TABLE IF NOT EXISTS `university`.`college` (
  `college_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `college_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`college_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university`.`department`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university`.`department` ;

CREATE TABLE IF NOT EXISTS `university`.`department` (
  `department_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `department_name` VARCHAR(45) NOT NULL,
  `department_code` VARCHAR(10) NOT NULL,
  `college_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`department_id`),
  INDEX `fk_department_colleage1_idx` (`college_id` ASC) VISIBLE,
  CONSTRAINT `fk_department_colleage1`
    FOREIGN KEY (`college_id`)
    REFERENCES `university`.`college` (`college_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university`.`course`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university`.`course` ;

CREATE TABLE IF NOT EXISTS `university`.`course` (
  `course_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `course_title` VARCHAR(45) NOT NULL,
  `course_number` INT NOT NULL,
  `course_credits` INT NOT NULL,
  `department_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`course_id`),
  INDEX `fk_course_department1_idx` (`department_id` ASC) VISIBLE,
  CONSTRAINT `fk_course_department1`
    FOREIGN KEY (`department_id`)
    REFERENCES `university`.`department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university`.`faculty`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university`.`faculty` ;

CREATE TABLE IF NOT EXISTS `university`.`faculty` (
  `faculty_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `faculty_fname` VARCHAR(45) NOT NULL,
  `faculty_lname` VARCHAR(45) NOT NULL,
  `department_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`faculty_id`),
  INDEX `fk_faculty_department1_idx` (`department_id` ASC) VISIBLE,
  CONSTRAINT `fk_faculty_department1`
    FOREIGN KEY (`department_id`)
    REFERENCES `university`.`department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university`.`term`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university`.`term` ;

CREATE TABLE IF NOT EXISTS `university`.`term` (
  `term_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `term_name` VARCHAR(45) NOT NULL,
  `term_year` YEAR(4) NOT NULL,
  PRIMARY KEY (`term_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university`.`section`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university`.`section` ;

CREATE TABLE IF NOT EXISTS `university`.`section` (
  `section_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `section_number` INT NOT NULL,
  `section_capacity` INT NOT NULL,
  `course_id` INT UNSIGNED NOT NULL,
  `faculty_id` INT UNSIGNED NOT NULL,
  `term_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`section_id`),
  INDEX `fk_section_course1_idx` (`course_id` ASC) VISIBLE,
  INDEX `fk_section_faculty1_idx` (`faculty_id` ASC) VISIBLE,
  INDEX `fk_section_term1_idx` (`term_id` ASC) VISIBLE,
  CONSTRAINT `fk_section_course1`
    FOREIGN KEY (`course_id`)
    REFERENCES `university`.`course` (`course_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_section_faculty1`
    FOREIGN KEY (`faculty_id`)
    REFERENCES `university`.`faculty` (`faculty_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_section_term1`
    FOREIGN KEY (`term_id`)
    REFERENCES `university`.`term` (`term_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university`.`student`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university`.`student` ;

CREATE TABLE IF NOT EXISTS `university`.`student` (
  `student_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `student_fname` VARCHAR(45) NOT NULL,
  `student_lname` VARCHAR(45) NOT NULL,
  `student_gender` CHAR(1) NOT NULL,
  `student_city` VARCHAR(45) NULL,
  `student_state` VARCHAR(10) NOT NULL,
  `student_birth` DATE NOT NULL,
  PRIMARY KEY (`student_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `university`.`enrollment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `university`.`enrollment` ;

CREATE TABLE IF NOT EXISTS `university`.`enrollment` (
  `section_id` INT UNSIGNED NOT NULL,
  `student_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`section_id`, `student_id`),
  INDEX `fk_section_student_student1_idx` (`student_id` ASC) VISIBLE,
  INDEX `fk_section_student_section1_idx` (`section_id` ASC) VISIBLE,
  CONSTRAINT `fk_section_student_section1`
    FOREIGN KEY (`section_id`)
    REFERENCES `university`.`section` (`section_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_section_student_student1`
    FOREIGN KEY (`student_id`)
    REFERENCES `university`.`student` (`student_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

use university;

INSERT INTO college (college_name)
values 
('College of PhysicalScience and Engineering'),
('College of Business and Communication'),
('College of Language and Letters');

INSERT INTO department (department_name, department_code, college_id)
values
('Computer Information Technology', 'CIT', 1),
('Economics', 'ECON', 2),
('Humanities and Philosophy', 'HUM', 3);
#select*from department;

INSERT INTO course (course_title, course_number, course_credits, department_id)
values
('Intro to Databases', 111, 3, 1),
('Econometrics', 388, 4, 2),
('Micro Economics', 150, 3, 2),
('Classical Heritage', 376, 2, 3);

INSERT INTO faculty (faculty_fname, faculty_lname, department_id)
values
('Marty', 'Morring', 1),
('Nate', 'Norris', 2),
('Ben', 'Barrus', 2),
('John', 'Jensen', 3),
('Bill', 'Barney', 1);

INSERT INTO term (term_name, term_year)
values
('Fall', 2019),
('Winter', 2018);

INSERT INTO student (student_fname, student_lname, student_gender, student_city, student_state, student_birth)
values
('Paul', 'Miller', 'M', 'Dallas', 'TX', 19960222),
('Katie', 'Smith', 'F', 'Provo', 'UT', 19950722),
('Kelly', 'Jones', 'F', 'Provo', 'UT', 19980622),
('Devon', 'Merrill', 'M', 'Mesa', 'AZ', 20000722),
('Mandy', 'Murdock', 'F', 'Topeka', 'KS', 19961122),
('Alece', 'Adams', 'F', 'Rigby', 'ID', 19970522),
('Bryce', 'Carlson', 'M', 'Bozeman', 'MT', 19971122),
('Preston', 'Larsen', 'M', 'Decatur', 'TN', 19960922),
('Julia', 'Madsen', 'F', 'Rexburg', 'ID', 19980922),
('Susan', 'Sorensen', 'F', 'Mesa', 'AZ', 19980809);

INSERT INTO section (section_number, section_capacity, course_id, faculty_id, term_id)
values
(1, 30, 1, 1, 1),
(1, 50, 3, 2, 1),
(2, 50, 3, 2, 1),
(1, 35, 2, 3, 1),
(1, 30, 4, 4, 1),
(2, 30, 1, 1, 2),
(3, 35, 1, 5, 2),
(1, 50, 3, 2, 2),
(2, 50, 3, 2, 2),
(1, 30, 4, 4, 2);

INSERT INTO enrollment (section_id, student_id)
values
(7,6),
(6,7),
(8,7),
(10,7),
(5, 4),
(9, 9),
(4, 2),
(4, 3),
(4, 5),
(5, 5),
(1, 1),
(3, 1),
(9, 8),
(6, 10);

#query1
SELECT student_fname, student_lname, date_format(student_birth, '%M %d, %Y') AS sept_birthdays
FROM student
WHERE date_format(student_birth, '%M') = 'September' ;

#query2
SELECT student_lname, student_fname, floor(datediff('20170105', student_birth)/365) AS 'Years', datediff('20170105', student_birth)%365 AS 'Days', concat(floor(datediff('20170105', student_birth)/365), ' - Yrs, ',datediff('20170105', student_birth)%365,' - Days') AS 'Years and Days'
FROM student
ORDER BY student_birth ;

#query3
SELECT student_fname, student_lname
FROM student st
JOIN enrollment en
ON en.student_id = st.student_id
JOIN section se
ON se.section_id = en.section_id
JOIN faculty fa
ON fa.faculty_id = se.faculty_id
WHERE faculty_lname = 'Jensen'
ORDER BY student_lname;

#query4 
SELECT faculty_fname, faculty_lname
FROM student st
JOIN enrollment en
ON en.student_id = st.student_id
JOIN section se
ON se.section_id = en.section_id
JOIN faculty fa
ON fa.faculty_id = se.faculty_id
JOIN term t
ON t.term_id = se.term_id
WHERE student_fname = 'Bryce' AND term_name ='Winter' AND term_year = 2018
ORDER BY faculty_lname;

#query5
SELECT student_fname, student_lname
FROM student st
JOIN enrollment en
ON en.student_id = st.student_id
JOIN section se
ON se.section_id = en.section_id
JOIN term t
ON t.term_id = se.term_id
JOIN course c
ON c.course_id = se.course_id
WHERE course_title = 'Econometrics' AND term_name ='Fall' AND term_year = 2019
ORDER BY student_lname;

#query6 
SELECT department_code, course_number, course_title
FROM student st
JOIN enrollment en
ON en.student_id = st.student_id
JOIN section se
ON se.section_id = en.section_id
JOIN term t
ON t.term_id = se.term_id
JOIN course c
ON c.course_id = se.course_id
JOIN department d
ON d.department_id = c.department_id
WHERE student_lname = 'Carlson' AND term_name = 'Winter'
ORDER BY course_title;

#query7
SELECT term_name, term_year, count(st.student_id) AS Enrollment
FROM student st
JOIN enrollment en
ON en.student_id = st.student_id
JOIN section se
ON se.section_id = en.section_id
JOIN term t
ON t.term_id = se.term_id
WHERE term_name = 'Fall' AND term_year = 2019;

#query 8 
SELECT college_name, count(c.course_id) AS courses
FROM college cl
JOIN department d
ON cl.college_id = d.college_id
JOIN course c
ON d.department_id = c.department_id
GROUP BY college_name
ORDER BY college_name;

#query 9 
SELECT faculty_fname, faculty_lname, sum(section_capacity)
FROM faculty f
JOIN section se
ON f.faculty_id = se.faculty_id
JOIN term t
ON t.term_id = se.term_id
WHERE term_name = 'Winter' AND term_year= 2018
GROUP BY faculty_fname, faculty_lname
ORDER BY section_capacity ;

#query10 
SELECT student_lname, student_fname, sum(course_credits) AS credits
FROM student st
JOIN enrollment en
ON en.student_id = st.student_id
JOIN section se
ON se.section_id = en.section_id
JOIN course c
ON c.course_id = se.course_id
JOIN term t
ON t.term_id = se.term_id
WHERE term_name ='Fall' and term_year = 2019
GROUP BY student_lname, student_fname
HAVING credits > 3
ORDER BY credits DESC;



```